@import '../../../base/src/scss/imports/variables';
@import '../../../base/src/scss/imports/layout';

.header {
  position: relative;

  // Straight beaver blue from 0% to 44rem left of center, then transition
  // from beaver blue to nittany navy from 44rem left of center to 44rem right
  // of center, then straight nittany navy from 44rem right of center to 100%.
  background: linear-gradient(
    to right,
    var(--beaver-blue) 0%,
    var(--beaver-blue) calc(50% - _rem(44)),
    var(--nittany-navy) calc(50% + _rem(44)),
    var(--nittany-navy) 100%
  );

  &__geometrics {
    position: absolute;
    inset: 0;
    overflow: hidden;

    // The design calls for a sky-blue linear gradient at a 2% angle overlaid
    // on the geometric lines. The hub geometric sprite has an API that takes
    // an optional fill property, so we can apply this unique gradient, tightly
    // scoped to this particular context.
    //
    // @see https://github.com/PSU-OOE/components/blob/bleeding-edge-headers/packages/sprite/src/assets/hub-geometric.svg
    --hub-geometric-gradient: url(#hub-geometric-header-gradient);

    // Two sprites are used to form the header geometrics design.  Since the
    // element that provides the gradient occupies the :first-child position
    // in the geometrics container, the sprites occupy the second and third
    // positions.
    .sprite {
      position: absolute;
      width: 71.8rem;
      top: -42.7rem;
      height: auto;
      opacity: .3;

      &:nth-child(2) {
        left: calc(50% - 33rem);
      }

      &:nth-child(3) {
        left: calc(50% + 38rem);
      }
    }
  }

  &__inner {
    max-width: _rem(122);
    margin: 0 auto;
    padding: 0 _rem(2);
    display: grid;
    grid-template-columns: min(50%, _rem(24)) auto;

    @include bp(m) {
      padding: 0 _rem(4);
    }
  }

  &__dogear {
    height: min-content;
    position: relative;
    padding: _rem(1) clamp(_rem(5), #{'calc(100% / 3)'}, _rem(7.5)) _rem(1) 0;

    // This clip path forms the "45 degree" part of the dogear.  There are a
    // few unique things going on here.  First off, the top of the clip path
    // starts at -.1rem above the dogear to work around what seems to be a
    // rounding error that sometimes shows an extremely thin blue line above
    // the dogear.  Second, because the dogear breaks free of its container
    // on the left-hand side to extend to the viewport edge, the clip-path
    // also has to extend to the left-hand edge. This is accomplished by using
    // a -2rem left bound.  Finally, to form the 45 degree angle, I've chosen
    // to extend the clip path from the upper-right-hand corner of the element
    // to an arbitrarily chosen 100vw down and to the left.  The important bit
    // here is that the lower-left end of the clip-path should be taller and
    // wider than the dogear.  A length of 100vw should ensure this.
    clip-path: polygon(
      _rem(-2) _rem(-.1),
      100% _rem(-.1),
      calc(100% - 100vw) 100vw
    );

    @include bp(m) {
      padding-top: _rem(1.5);
      padding-bottom: _rem(1.5);

      // Update the clip-path to extend -4rem to the left to account for the
      // increased padding on the container.
      clip-path: polygon(
        _rem(-4) _rem(-.1),
        100% _rem(-.1),
        calc(100% - 100vw) 100vw
      );
    }

    @media screen and (min-width: 1180px) {
      // Update the clip path to extend to the ege of the viewport using the
      // same math as the ::before pseudo-element of the dogear element.
      clip-path: polygon(
        calc((-100vw + _rem(110)) / 2) _rem(-.1),
        100% _rem(-.1),
        calc(100% - 100vw) 100vw
      );
    }

    &::before {
      content: '';
      position: absolute;

      // Extend the pseudo-element -2rem to the left to meet the viewport edge.
      inset: 0 0 0 _rem(-2);

      background-color: var(--white);
      background-image: linear-gradient(
        to right,
        #{'color-mix(in srgb, var(--slate-light) 50%, transparent)'},
        transparent 100%
      );

      // @TODO: Remove fallback when appropriate.
      @supports not (color: color-mix(in srgb, white, white)) {
        background-image: linear-gradient(
          to right,
          rgba($slate-light, 50%),
          transparent 100%
        );
      }

      @include bp(m) {
        // Extend the pseudo-element -4rem to compensate for the wider padding.
        inset: 0 0 0 _rem(-4);
      }

      @media screen and (min-width: 1180px) {

        // Extends the pseudo-element all the way to the viewport left edge by
        // taking the negative viewport width, adding the max-width of the
        // containing element, and dividing that by 2.  It's important not to
        // overshoot the viewport on the left due to the gradient that must
        // be applied to the dogear.
        inset: 0 0 0 calc((-100vw + _rem(110)) / 2);
      }
    }
  }

  &__branding {
    position: relative;
    display: block;
    color: var(--beaver-blue);
    width: fit-content;

    .sprite {
      height: auto;
      width: _rem(13);
      min-width: _rem(3);
      max-width: 100%;

      @include bp(xs) {
        width: _rem(18.5);
      }
    }
  }

  &__content {
    display: flex;
    align-items: center;
    position: relative;
    padding: _rem(.3) 0;

    @include bp(m) {
      padding: _rem(1) 0 0 0;
    }
  }

  &__overflow {
    position: relative;
    padding: 0 _rem(2);
    max-width: _rem(122);
    margin: auto;

    @include bp(m) {
      padding: 0 _rem(4);
    }
  }
}

// Prospect site specifics -- move to prospect site.
.header__small {
  display: flex;
  gap: _rem(4);
  margin-left: auto;

  @include bp(m) {
    display: none;
  }

  &-utility {
    display: flex;
    align-items: flex-end;
    gap: _rem(2);
  }

  &-cta {
    padding: _rem(1) 0;

    @include bp(m) {
      display: none;
    }
  }
}

.header__large {
  display: none;
  @include bp(m) {
    display: flex;
    margin-left: auto;
    gap: _rem(4);
  }

  &-utility {
    display: flex;
    align-items: center;
    gap: _rem(2);
  }

  &-utility-links {
    display: flex;
    align-items: center;
    gap: _rem(2);
    margin: 0;
    padding: 0;
    list-style-type: none;
  }

  &-utility-link {
    color: var(--text-color--light);
    text-decoration: none;
    font-size: var(--font-size--xsmall);
    line-height: var(--line-height--nospace);
    letter-spacing: var(--letter-spacing--medium);

    @include bp(xl) {
      font-size: var(--font-size--msmall);
    }
  }

  &-menu {
    display: none;

    @include bp(m) {
      display: initial;
    }
  }
}

// Minimal representation (i.e. campaign pages).
.tagline {
  line-height: 0;

  @include bp(xs) {
    margin-left: _rem(2);
  }

  @include bp(m) {
    margin-left: _rem(4);
  }

  &::before {
    content: '';
    display: block;
    background-color: var(--sky-blue);
    height: _rem(.1);
    width: _rem(6);
    margin-bottom: _rem(.6);

    @include bp(xs) {
      height: _rem(.2);
      width: _rem(7);
      margin-bottom: _rem(.7);
    }

    @include bp(m) {
      height: _rem(.3);
      width: _rem(8);
      margin-bottom: _rem(.8);
    }
  }

  &__text {
    color: var(--text-color--light);
    font-family: var(--font-family--default);
    font-size: var(--font-size--5xsmall);
    font-weight: var(--font-weight--bold);
    line-height: var(--line-height--xsnug);

    @include bp(xs) {
      font-size: var(--font-size--3xsmall);
      margin-bottom: _rem(1.5);
    }

    @include bp(m) {
      font-size: var(--font-size--mlarge);
    }
  }

  &__strong {
    font-weight: var(--font-weight--extrabold);
  }
}

.overflow-gap {
  padding: _rem(.6) 0;
}

.header__small-overflow {
  padding: .5rem 0;

  @include bp(m) {
    display: none;
  }
}
