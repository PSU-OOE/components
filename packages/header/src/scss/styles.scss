@import '../../../base/src/scss/imports/variables';
@import '../../../base/src/scss/imports/layout';

.header {
  // Straight beaver blue from 0% to 44rem left of center, then transition
  // from beaver blue to nittany navy from 44rem left of center to 44rem right
  // of center, then straight nittany navy from 44rem right of center to 100%.
  --header-background: #{linear-gradient(
    to right,
    var(--beaver-blue) 0%,
    var(--beaver-blue) calc(50% - _rem(44)),
    var(--nittany-navy) calc(50% + _rem(44)),
    var(--nittany-navy) 100%
  )};

  --dogear-left-color: color-mix(in srgb, var(--slate-light) 50%, var(--white));
  --dogear-right-color: var(--white);
  --hub-geometrics-opacity: .3;

  position: relative;
  background: var(--header-background);

  // @TODO: Remove fallback when appropriate.
  @supports not (color: color-mix(in srgb, white, white)) {
    --dogear-left-color: rgba($slate-light, 50%);
  }

  &--inversed {
    --header-background: var(--white);
    --dogear-left-color: var(--beaver-blue);
    --dogear-right-color: color-mix(in srgb, var(--beaver-blue), var(--nittany-navy) 25%);
    --hub-geometrics-opacity: .2;

    @include bp(s) {
      --dogear-right-color: color-mix(in srgb, var(--beaver-blue), var(--nittany-navy) 50%);
    }
  }

  &__geometrics {
    position: absolute;
    inset: 0;
    overflow: hidden;

    // The design calls for a sky-blue linear gradient at a 2% angle overlaid
    // on the geometric lines. The hub geometric sprite has an API that takes
    // an optional fill property, so we can apply this unique gradient, tightly
    // scoped to this particular context.
    //
    // @see https://github.com/PSU-OOE/components/blob/bleeding-edge-headers/packages/sprite/src/assets/hub-geometric.svg
    --hub-geometric-gradient: url(#hub-geometric-header-gradient);

    // Two sprites are used to form the header geometrics design.  Since the
    // element that provides the gradient occupies the :first-child position
    // in the geometrics container, the sprites occupy the second and third
    // positions.
    .sprite {
      position: absolute;
      width: _rem(71.8);
      top: _rem(-42.7);
      height: auto;
      opacity: var(--hub-geometrics-opacity);

      &:nth-child(2) {
        left: calc(50% - #{_rem(33)});
      }

      &:nth-child(3) {
        left: calc(50% + #{_rem(38)});
      }
    }
  }

  &__inner {
    max-width: _rem(122);
    margin: 0 auto;
    padding: 0 _rem(2);
    display: grid;
    grid-template-areas:
      "dogear content"
      "overflow overflow";
    grid-template-columns: min(50%, _rem(24)) auto;

    @include bp(s) {
      padding: 0 _rem(4);
    }
  }

  &__dogear {
    position: relative;
    grid-area: dogear;
    height: fit-content;

    // Quote the calc in order to prevent SCSS from evaluating it.  Instead,
    // we want the browser to run the calculation to prevent rounding errors.
    padding: _rem(1) clamp(_rem(5), #{'calc(100% / 3)'}, _rem(7.5)) _rem(1) 0;

    // This clip path forms the "45 degree" part of the dogear.  There are a
    // few unique things going on here.  First off, the top of the clip path
    // starts at -.1rem above the dogear to work around what seems to be a
    // rounding error that sometimes shows an extremely thin blue line above
    // the dogear.  Second, because the dogear breaks free of its container
    // on the left-hand side to extend to the viewport edge, the clip-path
    // also has to extend to the left-hand edge. This is accomplished by using
    // a -2rem left bound.  Finally, to form the 45 degree angle, I've chosen
    // to extend the clip path from the upper-right-hand corner of the element
    // to an arbitrarily chosen 100vw down and to the left.  The important bit
    // here is that the lower-left end of the clip-path should be taller and
    // wider than the dogear.  A length of 100vw should ensure this.
    clip-path: polygon(
      _rem(-2) _rem(-.1),
      100% _rem(-.1),
      calc(100% - 100vw) 100vw
    );

    @include bp(s) {
      // Update the clip-path to extend -4rem to the left to account for the
      // increased padding on the container.
      clip-path: polygon(
          _rem(-4) _rem(-.1),
          100% _rem(-.1),
          calc(100% - 100vw) 100vw
      );
    }

    @include bp(m) {
      padding-top: _rem(1.5);
      padding-bottom: _rem(1.5);
    }

    @media screen and (min-width: 1180px) {
      // Update the clip path to extend to the ege of the viewport using the
      // same math as the ::before pseudo-element of the dogear element.
      clip-path: polygon(
        calc((-100vw + _rem(110)) / 2) _rem(-.1),
        100% _rem(-.1),
        calc(100% - 100vw) 100vw
      );
    }

    &::before {
      z-index: -1;
      content: '';
      position: absolute;

      // Extend the pseudo-element -2rem to the left to meet the viewport edge.
      inset: 0 0 0 _rem(-2);

      background: linear-gradient(
        to right,
        var(--dogear-left-color),
        var(--dogear-right-color) 100%
      );

      @include bp(s) {
        // Extend the pseudo-element -4rem to compensate for the wider padding.
        inset: 0 0 0 _rem(-4);
      }

      @media screen and (min-width: 1180px) {

        // Extends the pseudo-element all the way to the viewport left edge by
        // taking the negative viewport width, adding the max-width of the
        // containing element, and dividing that by 2.  It's important not to
        // overshoot the viewport on the left due to the gradient that must
        // be applied to the dogear.
        inset: 0 0 0 calc((-100vw + #{_rem(110)}) / 2);
      }
    }
  }

  &__content {
    position: relative;
    grid-area: content;
    display: flex;
    align-items: center;
    padding: _rem(.5) 0;

    @include bp(m) {
      padding: _rem(1) 0;
    }
  }

  &__overflow {
    position: relative;
    grid-area: overflow;

    &:empty {
      padding: _rem(.6) 0;
    }
  }
}
