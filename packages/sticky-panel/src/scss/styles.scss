@import "../../../base/src/scss/imports/variables";
@import "../../../base/src/scss/imports/layout";

.sticky-panel {
  position: sticky;
  top: 0;

  &__content {
    position: relative;

    &::after {
      content: " ";
      display: block;
      height: _rem(1.7);
      background: linear-gradient(to bottom,rgba(0,0,0,0.12),rgba(0,0,0,0));
      position: absolute;
      bottom: _rem(-1.7);
      left: 0;
      width: 100%;
    }
  }
}
.pl-c-main {
  padding: 0 !important;
}
// @TODO: Move to prospect site.
.sticky-content {
  max-width: _rem(122);
  margin: 0 auto;
  padding: 0 _rem(1) _rem(1) _rem(1);
  display: grid;
  grid-template-areas:
      "dogear content";
  grid-template-columns: min(40%, _rem(16)) auto;

  @include bp(s) {
    padding: 0 _rem(4) _rem(1) _rem(4);
  }
}

.sticky-content__dogear {
  position: relative;
  grid-area: dogear;
  height: fit-content;

  // Quote the calc in order to prevent SCSS from evaluating it.  Instead,
  // we want the browser to run the calculation to prevent rounding errors.
  padding: _rem(1) clamp(_rem(5), #{'calc(100% / 3)'}, _rem(7.5)) _rem(1) 0;

  // This clip path forms the "45 degree" part of the dogear.  There are a
  // few unique things going on here.  First off, the top of the clip path
  // starts at -.1rem above the dogear to work around what seems to be a
  // rounding error that sometimes shows an extremely thin blue line above
  // the dogear.  Second, because the dogear breaks free of its container
  // on the left-hand side to extend to the viewport edge, the clip-path
  // also has to extend to the left-hand edge. This is accomplished by using
  // a -2rem left bound.  Finally, to form the 45 degree angle, I've chosen
  // to extend the clip path from the upper-right-hand corner of the element
  // to an arbitrarily chosen 100vw down and to the left.  The important bit
  // here is that the lower-left end of the clip-path should be taller and
  // wider than the dogear.  A length of 100vw should ensure this.
  clip-path: polygon(
      _rem(-2) _rem(-.1),
      100% _rem(-.1),
      calc(100% - 100vw) 100vw
  );

  @include bp(s) {
    // Update the clip-path to extend -4rem to the left to account for the
    // increased padding on the container.
    clip-path: polygon(
        _rem(-4) _rem(-.1),
        100% _rem(-.1),
        calc(100% - 100vw) 100vw
    );
  }

  @include bp(m) {
    padding-top: _rem(1.5);
    padding-bottom: _rem(1.5);
  }

  @media screen and (min-width: 1180px) {
    // Update the clip path to extend to the ege of the viewport using the
    // same math as the ::before pseudo-element of the dogear element.
    clip-path: polygon(
        calc((-100vw + _rem(110)) / 2) _rem(-.1),
        100% _rem(-.1),
        calc(100% - 100vw) 100vw
    );
  }

  &::before {
    z-index: -1;
    content: '';
    position: absolute;

    // Extend the pseudo-element -2rem to the left to meet the viewport edge.
    inset: 0 0 0 _rem(-2);

    background-color: var(--white);
    background-image: linear-gradient(
        to right,
        #{'color-mix(in srgb, var(--slate-light) 50%, transparent)'},
        transparent 100%
    );

    // @TODO: Remove fallback when appropriate.
    @supports not (color: color-mix(in srgb, white, white)) {
      background-image: linear-gradient(
          to right,
          rgba($slate-light, 50%),
          transparent 100%
      );
    }

    @include bp(s) {
      // Extend the pseudo-element -4rem to compensate for the wider padding.
      inset: 0 0 0 _rem(-4);
    }

    @media screen and (min-width: 1180px) {

      // Extends the pseudo-element all the way to the viewport left edge by
      // taking the negative viewport width, adding the max-width of the
      // containing element, and dividing that by 2.  It's important not to
      // overshoot the viewport on the left due to the gradient that must
      // be applied to the dogear.
      inset: 0 0 0 calc((-100vw + #{_rem(110)}) / 2);
    }
  }
}

.sticky-content__branding-block {
  display: block;
  color: var(--beaver-blue);

  .sprite {
    height: auto;
    width: _rem(13);
    min-width: _rem(3);
    max-width: 100%;

    @include bp(xs) {
      width: _rem(18.5);
    }
  }
}

.sticky-content__content {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  padding-top: _rem(1);

  & > * {
    display: inline-block;
  }
}

.sticky-content__search {
  & + .sticky-content__menu {
    margin-left: clamp(_rem(.8), #{calc((100% - _rem(17)) / 4)}, _rem(3));
  }
}

.sticky-content__menu {
  & + .sticky-content__cta {
    margin-left: clamp(_rem(1), #{calc((100% - _rem(17)) / 2)}, _rem(4));
  }
}

.sticky-content__cta {
  min-width: min(50%, 28rem);
  width: 100%;
  max-width: _rem(30);
}
