@import "imports/variables";
@import "imports/layout";

// Custom properties.
@import "variables/colors";
@import "variables/spacing";
@import "variables/transitions";
@import "variables/typography";
@import "variables/forms";
@import "variables/layers";

@import "typography";

// Universal selectors.
*, *:before, *:after {
  box-sizing: border-box;
}

// Type selectors.
html {
  font-size: 62.5%;
  overflow: hidden;
  overflow-y: auto;
  -webkit-font-smoothing: antialiased;
  background: $nittany-navy;
  scroll-behavior: smooth;

  @media (prefers-reduced-motion) {
    scroll-behavior: auto;
  }
}

body {
  margin: 0;
  font-size: var(--font-size--default);
  font-family: var(--font-family--default);
  color: var(--text-color--default);
  background: var(--white);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a,
.link--default {
  color: var(--link-color);
  font-weight: inherit;
  text-decoration: underline;
  text-decoration-style: dotted;
  text-decoration-color: inherit;
  text-decoration-thickness: _rem(0.1);
  outline: solid _rem(.2) transparent;
  outline-offset: _rem(0.2);
  transition: outline-color var(--transition-duration--default) linear;
  text-underline-offset: .2em;

  &:hover, &:focus-visible {
    text-decoration: underline;
    text-decoration-style: solid;
    text-decoration-thickness: _rem(.1);
  }

  &:focus-visible {
    outline-color: var(--focus-indicator-color);
    outline-offset: _rem(0.2);
  }

  // @TODO: This probably isn't used...
  &.hidden {
    left: _rem(-99.9);
    position: absolute;

    &:focus {
      background-color: transparent;
      color: #ffffff;
      left: _rem(.5);
    }
  }
}

.link--color-reversed {
  color: var(--link-color--light);
  text-decoration-color: var(--link-color--light);

  &:hover, &:focus-visible {
    text-decoration-color: var(--link-color--light);
  }
}

img {
  display: block;
  max-width: 100%;
  height: auto;
}

hr {
  border: none;
  margin: _rem(2) 0;
  padding: 0;
  background: transparent;
  height: _rem(.1);
  width: 100%;
  border-bottom: _rem(.1) dotted rgba($nittany-navy, 0.25);
}

nav {
  ul {
    border: medium none;
    list-style: none outside none;
    margin: 0;
    padding: 0;
    text-align: left;
  }
}

b,
strong {
  font-weight: 700;
}

footer {
  overflow: hidden;
}

@import 'blockquote';
@import 'figure';
@import "buttons";

// Class selectors

.stealthed {
  display: none !important;
}

// Removing span:after content for visually-hidden class
span {
  &.visually-hidden {
    &:after {
      content: none !important;
    }
  }
}

// Custom properties are amazing...but often times with newer technology,
// often alien at the same time.  To understand this mechanism, one first
// has to understand two under-advertised features of CSS.
//
// 1. The 'initial' keyword and the concept of Guaranteed-Invalid. The CSS
// specification says that when a custom property encounters a value that is
// the Guaranteed-Invalid state, the behavior is that it will fall back to
// the next value in the chain.  Using the 'initial' keyword, a property can
// be reset to the Guaranteed-Invalid state.  For example `var(initial, red)`
// must evaluate to `red`.
// 2. A space character is allowed as the value of a custom property! The
// syntax may look a little strange, but `--var: ;` is a variable that holds
// a space character.
//
// Combining these two behaviors, one can accomplish amazing things.

// By default, or in light contexts, set `--if-light` to initial and
// `--if-dark` to a space.  This makes a pattern like:
// `--color: var(--if-light, red) var(--if-dark, blue);` evaluate to:
// `--color: red ;`.  Do note the extra space at the end! This space character
// is the value of `--if-dark`!
:root, [data-light] {
  --if-light: initial;
  --if-dark: ;
}

// Likewise, do the opposite for dark contexts.
// `--color: var(--if-light, red) var(--if-dark, blue);` will evaluate to
// `--color:  blue;`. Note there are two spaces between `--color:` and `blue;`.
// The extra space character is the value of `if-light`.
[data-dark] {
  --if-dark: initial;
  --if-light: ;
}
